#!/usr/bin/env python

import os
import shutil
from subprocess import call, DEVNULL
import re
import json

MARKDOWN_FILE = "index.md"

PDF_MARKDOWN_FILE = "manual.pdf.md"
PDF_OUTPUT_FILE = "manual.pdf"
PDF_COVER_FILE = "config/cover.html"
PDF_STYLE_FILE = "config/pdf.css"
PDF_DEBUG = False

TOC_MIN_LEVEL = 2
TOC_MAX_LEVEL = 3


def process_images():
    IMAGE_INPUT_DIR = "resources"
    IMAGE_OUTPUT_DIR = "images"

    COLORIZE = ["-fill", "gray", "-fuzz", "50%", "+opaque", "#000000", "-fill", "#cce500", "-tint", "100"]

    def infile(filename):
        return os.path.join(IMAGE_INPUT_DIR, filename)

    def outfile(filename):
        return os.path.join(IMAGE_OUTPUT_DIR, filename)

    def copyIfChanged(infile, outfile):
        comparefile = "_compare.png"
        if not os.path.exists(outfile) or call(["compare", "-quiet", "-metric", "ae", infile, outfile, comparefile], stdout=DEVNULL, stderr=DEVNULL) == 1:
            shutil.copyfile(infile, outfile)
        else:
            os.remove(infile)
        if os.path.exists(comparefile):
            os.remove(comparefile)

    pages = [
        "page-clock.png",
        "page-curve-sequence.png",
        "page-curve-steps.png",
        "page-curve-track.png",
        "page-logic-steps.png",
        "page-stochastic-steps.png",
        "page-layout-cv-example.png",
        "page-layout-cv.png",
        "page-layout-gate.png",
        "page-layout-link.png",
        "page-layout-mode-confirm.png",
        "page-layout-mode.png",
        "page-midi-cv-track.png",
        "page-midi-output.png",
        "page-monitor-cv-in.png",
        "page-monitor-cv-out.png",
        "page-monitor-midi.png",
        "page-monitor-stats.png",
        "page-note-sequence.png",
        "page-note-steps-quick-access.png",
        "page-note-steps.png",
        "page-note-track.png",
        "page-overview.png",
        "page-pattern.png",
        "page-performer.png",
        "page-project.png",
        "page-routing-edit.png",
        "page-routing.png",
        "page-song-chain-example.png",
        "page-song-pattern-chain.png",
        "page-song-playback.png",
        "page-song.png",
        "page-system-cal-edit.png",
        "page-system-cal.png",
        "page-system-confirm.png",
        "page-system-update.png",
        "page-system-utils.png",
        "page-tempo-nudge.png",
        "page-tempo.png",
        "page-user-scale.png",
        "page-generators.png",
        "page-generators-euclidean.png",
        "page-generators-random.png",
        "page-user-settings.png",
        "page-metropolix-repeat.png",
        "page-metropolix-repeat-mode.png",
        "page-stochastic-track.png",
        "page-arp-track.png",
        "page-arp-steps.png",
        "page-arp-sequence.png",
        "page-stochastic-sequence.png"
    ]

    print("Processing images ...")

    tmpfile = "tmp.png"

    # rescale page images
    for filename in pages:
        print("Resizing %s" % (filename))
        call(["convert", infile(filename), *COLORIZE, "-filter", "Box", "-resize", "512x128", tmpfile])
        copyIfChanged(tmpfile, outfile(filename))

    # create section images
    def section_image(filename):
        call(["convert", infile("page-layout-mode.png"), *COLORIZE, "-filter", "Box", "-resize", "512x128", infile(filename), "-compose", "lighten", "-composite", tmpfile])
        copyIfChanged(tmpfile, outfile(filename))

    section_image("section-header.png")
    section_image("section-main.png")
    section_image("section-footer.png")


def generate_toc(markdown):
    print("Generating table of contents ...")

    headings = re.findall(r"<h(\d) id=\"([\w-]+)\">(.+)</h\1>", markdown)
    toc = "\n"

    for heading in headings:
        level = int(heading[0])
        anchor = heading[1]
        title = heading[2]
        if TOC_MIN_LEVEL <= level <= TOC_MAX_LEVEL:
            level -= TOC_MIN_LEVEL
            toc += "%s- [%s](#%s)\n" % (level * "  ", title, anchor)

    toc += "\n"

    markdown = re.sub(r"(<!-- toc-begin -->\n)(.*)(<!-- toc-end -->\n)", r"\g<1>" + toc + r"\g<3>", markdown, flags=re.DOTALL)

    return markdown


def verify_anchors(markdown):
    print("Verifying anchors ...")

    anchors = re.findall(r"id=\"([\w-]+)\"", markdown)
    lines = markdown.split("\n")

    for index, line in enumerate(lines):
        m = re.search(r"\(#([\w-]+)\)", line)
        if m:
            ref = m.group(1)
            if not ref in anchors:
                print("Found reference to unknown anchor '%s' on line %d" % (ref, index))


def verify_button_labels(markdown):
    print("Verifying button labels ...")

    anchors = re.findall(r"`\w+`", markdown)
    print(sorted(list(set(anchors))))


def process_markdown():
    print("Processing markdown ...")

    markdown = open(MARKDOWN_FILE, "r").read()
    markdown = generate_toc(markdown)
    verify_anchors(markdown)
    verify_button_labels(markdown)
    open(MARKDOWN_FILE, "w").write(markdown)


def process_pdf():
    print("Processing PDF ...")

    markdown = open(MARKDOWN_FILE, "r").read()

    # remove frontmatter chunk
    markdown = re.sub(r"---\n(.*\n)*---", "", markdown)

    # remove pdf exclude blocks
    markdown = re.sub(r"<!-- pdf-exclude-begin -->\n.*<!-- pdf-exclude-end -->\n", "", markdown, flags=re.DOTALL)

    # add page breaks
    page_break = '<div style="page-break-after: always;"></div>'
    markdown = re.sub(r"(<!-- page-break -->)", page_break + r"\n\1", markdown)

    # add section numbers
    if False:
        headings = re.finditer(r"(<h([\d]).*>)(.*)(</h\2>)", markdown)
        number = {}
        sections = {}
        for heading in headings:
            # print(heading)
            level = int(heading.group(2))
            name = heading.group(3)
            replacement = name
            if level >= TOC_MIN_LEVEL and level <= TOC_MAX_LEVEL:
                level -= TOC_MIN_LEVEL
                number[level] = number.get(level, 0) + 1
                number[level + 1] = 0
                section = ".".join([str(number[i]) for i in range(0, level + 1)])
                replacement = section + " " + name
                # print(section, name)
            sections[heading.group()] = replacement
            # print(heading.group(2))
        # print(sections)
        markdown = re.sub(r"(<h([\d]).*>)(.*)(</h\2>)", lambda m: m.expand(r"\1") + sections[m.group()] + m.expand(r"\4"), markdown)

        markdown = generate_toc(markdown)

    # add cover page
    cover = open(PDF_COVER_FILE, "r").read()
    markdown = cover + markdown

    # write pdf markdown
    open(PDF_MARKDOWN_FILE, "w").write(markdown)

    # convert to pdf
    pdf_args = ["mdpdf", PDF_MARKDOWN_FILE, PDF_OUTPUT_FILE, "--noEmoji", "--noHighlight", "--ghStyle", "--style=" + PDF_STYLE_FILE]
    if PDF_DEBUG:
        pdf_args.append("--debug")
    call(pdf_args)

    # remove pdf markdown
    os.remove(PDF_MARKDOWN_FILE)


process_images()
process_markdown()
process_pdf()
